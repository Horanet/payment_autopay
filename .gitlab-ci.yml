stages:
- lint
- build
- test
- deploy

variables:
  #CI_DEBUG_TRACE: "true" # useful to debug variables for each stages
  MODULE_NAME: payment_autopay
  # === PostGres Inofrmation === #
  POSTGRES_DB: db-docker-$CI_PIPELINE_ID-$CI_PROJECT_NAME
  POSTGRES_USER: odoo
  POSTGRES_PASSWORD: odoo
  DB_ACCESS: --db_host db --db_port 5432 -r $POSTGRES_USER -w $POSTGRES_PASSWORD
  # === GITLAB CI Useful Variable === #
  IMAGE_TAG: $CI_REGISTRY_IMAGE/$CI_PIPELINE_ID
  PORT: 8000
  REVIEW_CONTAINER_NAME: $CI_PROJECT_NAME-$CI_PIPELINE_ID
  GIT_SUBMODULE_STRATEGY: recursive
  
  # === Different type of login === #
before_script:
  # /!\ The user who has triggered the pipeline needs to be in the gitLab/horanet/docker Group /!\
  #- docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  #- docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
  - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
  #- docker login -u $CI_REGISTRY_USER -p $CI_DEPLOY_PASSWORD $CI_REGISTRY
   
flake8:
  stage: lint
  variables:
    FLAKE8_IMAGE: $CI_REGISTRY/horanet/docker/flake8
  script:
  - docker pull $FLAKE8_IMAGE
  - docker run --rm -v $CI_PROJECT_DIR:/project $FLAKE8_IMAGE **/*.py
  only:
  - merge_requests
  - dev
   
eslint:
  stage: lint
  variables:
    ESLINT_IMAGE: $CI_REGISTRY/horanet/docker/eslint
  script:
  - docker pull $ESLINT_IMAGE
  - docker run --rm -v $CI_PROJECT_DIR:/project $ESLINT_IMAGE --ignore-path .eslintignore **/*.js
  only:
  - merge_requests
  - dev
  
build:
  stage: build
  script:
  - docker rmi -f $IMAGE_TAG
  - git submodule update --remote
  - docker build --build-arg CI_JOB_TOKEN="$CI_JOB_TOKEN" -t $IMAGE_TAG . --pull
  only:
  - master
  - /^release/.*$/
  - dev
  - merge_requests

tests:
  stage: test
  script:
  - docker run -d -e POSTGRES_USER=$POSTGRES_USER -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD --name $POSTGRES_DB postgres:latest
  - sleep 10
  - docker run --rm --link $POSTGRES_DB:db $IMAGE_TAG -d my-db -i $MODULE_NAME,l10n_fr --stop-after-init
  - docker run --rm --mount src=covvolume_$CI_PIPELINE_ID,target=/opt/odoo-addons --link $POSTGRES_DB:db $IMAGE_TAG python -m coverage run /opt/venv-odoo/bin/odoo $DB_ACCESS -d my-db --db-filter my-db -u $MODULE_NAME --test-enable --stop-after-init
  - docker run --rm --mount src=covvolume_$CI_PIPELINE_ID,target=/opt/odoo-addons $IMAGE_TAG python -m coverage report --skip-covered --include="./${MODULE_NAME}/*"
  after_script:
  - docker rm -vf $POSTGRES_DB
  - docker volume rm covvolume_$CI_PIPELINE_ID
  only:
  - master
  - dev
  - merge_requests
  coverage: '/^TOTAL\s+\d+\s+\d+\s+(\d+)%$/'

deploy_review:
  stage: deploy
  script:
  - docker run -d -e POSTGRES_USER=$POSTGRES_USER -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD --name $REVIEW_CONTAINER_NAME-db postgres:latest
  - sleep 10
  - docker run --rm -e VIRTUAL_HOST=$CI_ENVIRONMENT_SLUG.ci.horanet.com -e VIRTUAL_PORT=8069 --link $REVIEW_CONTAINER_NAME-db:db --name $REVIEW_CONTAINER_NAME-odoo $IMAGE_TAG -d my-db -i $MODULE_NAME,l10n_fr --load-language=fr_FR -l fr_FR --stop-after-init
  - docker run -d -e VIRTUAL_HOST=$CI_ENVIRONMENT_SLUG.ci.horanet.com -e VIRTUAL_PORT=8069 --link $REVIEW_CONTAINER_NAME-db:db --name $REVIEW_CONTAINER_NAME-odoo $IMAGE_TAG -d my-db --db-filter my-db
  environment:
    name: review/$CI_PROJECT_NAME/$CI_COMMIT_REF_NAME
    url: http://$CI_ENVIRONMENT_SLUG.ci.horanet.com
  only:
  - master
  - /^release/.*$/

stop_review:
  stage: deploy
  when: manual
  script:
  - docker rm -vf $REVIEW_CONTAINER_NAME-odoo $REVIEW_CONTAINER_NAME-db
  only:
  - master
  - /^release/.*$/
